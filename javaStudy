java只支持单继承，不支持多继承，但支持多层继承
为什么java只支持单继承，但在c++中是支持多继承的，避免菱形继承，c++中可以定义虚基类来解决菱形继承，但是java中没有指针这个概念，所以不支持多继承

子类能继承父类中的哪些内容
		构造方法		成员变量		成员方法
private 不能			能				不能

public	不能			能				能
子类虽然能继承父类私有的成员变量，但是却不能调用

super关键字
当子类和父类有同名的成员变量或方法时，使用 super 可以访问父类的版本。
class Parent {
    int value = 10;
    void show() {
        System.out.println("Parent show");
    }
}

class Child extends Parent {
    int value = 20;
    void show() {
        System.out.println("Child show");
    }
    void print() {
        System.out.println(super.value); // 输出 10，访问父类的 value
        super.show(); // 调用父类的 show 方法
    }
}
在子类构造方法中，可以用 super(...) 调用父类的构造方法，必须是构造方法的第一行。
class Parent {
    Parent(int x) {
        System.out.println("Parent constructor: " + x);
    }
}

class Child extends Parent {
    Child(int x, int y) {
        super(x); // 调用父类构造方法
        System.out.println("Child constructor: " + y);
    }
}
当子类和父类有同名成员时，super 可以明确表示访问的是父类的成员，而不是子类自己的成员。
总结
super 用于访问父类的成员变量和方法。
super(...) 用于调用父类的构造方法。
解决子类和父类成员重名时的歧义。

多态
指的是同一个接口或父类引用，在不同的实际对象上表现出不同的行为。
多态简单来说就是：父类引用指向子类对象，通过该引用调用方法时，会根据实际对象类型执行对应的方法。
class Animal {
    void speak() {
        System.out.println("Animal speaks");
    }
}

class Dog extends Animal {
    void speak() {
        System.out.println("Dog barks");
    }
}

class Cat extends Animal {
    void speak() {
        System.out.println("Cat meows");
    }
}

public class Test {
    public static void main(String[] args) {
        Animal a1 = new Dog();
        Animal a2 = new Cat();

        a1.speak(); // 输出 Dog barks
        a2.speak(); // 输出 Cat meows
    }
}
这里，虽然 a1 和 a2 的类型都是 Animal，但实际调用的是 Dog 和 Cat 的 speak 方法，这就是多态。

实现多态的前提
Java 实现多态需要满足以下几个条件：
	
继承（Inheritance）
必须有父类和子类（或接口和实现类）的继承关系。

方法重写（Override）
子类必须重写父类的方法（即方法名、参数列表都一样，返回值兼容）。

父类引用指向子类对象
必须用父类类型的引用指向子类对象，例如：Animal a = new Dog();

方法调用时表现出不同的行为
通过父类引用调用被重写的方法时，实际执行的是子类的方法（即“动态绑定”）。
