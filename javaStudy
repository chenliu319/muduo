FileInputStream
操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中来
基本用法
public class FileInputStreamDemo {
    public static void main(String[] args) {
        FileInputStream fis = null;
        try {
            // 创建 FileInputStream 对象，关联文件路径
            fis = new FileInputStream("test.txt");
            
            // 读取文件内容
            int data;
            while ((data = fis.read()) != -1) {
                // 输出每个字节（可以转为字符）
                System.out.print((char) data);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            // 关闭流，释放资源
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

使用字节数组读取（效率更高）
public class FileInputStreamBufferDemo {
    public static void main(String[] args) {
        try (FileInputStream fis = new FileInputStream("test.txt")) {
            byte[] buffer = new byte[1024]; // 每次读取1KB
            int len;
			//将读取到的数据放入数组buffer中，每次最多存入1kb数据
            while ((len = fis.read(buffer)) != -1) {
                // 只输出实际读取的部分
                System.out.print(new String(buffer, 0, len));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

常用方法说明
FileInputStream(String name)：通过文件路径创建输入流。
int read()：读取一个字节，返回值为字节内容，读到末尾返回 -1。
int read(byte[] b)：读取多个字节到数组，返回实际读取的字节数，末尾返回 -1。
void close()：关闭流，释放资源。

read()和read(byte[] b)的区别
read() 和 read(byte[] b) 都是 Java 中 InputStream（包括 FileInputStream）的读取方法，但它们有以下区别：
1. read()
方法签名：int read()

作用：每次读取一个字节（8位），返回该字节的整数值（0~255），如果到达文件末尾，返回 -1。

2. read(byte[] b)
方法签名：int read(byte[] b)

作用：每次尝试读取多个字节，存入参数 b 这个字节数组，返回实际读取的字节数（可能小于数组长度），到达末尾返回 -1。
